---
- name: Set hostname
  block:
    - name: Set hostname for master
      hostname:
        name: "ns1.{{ domain }}"
      when: type == "master"

    - name: Set hostname for slave
      hostname:
        name: "ns2.{{ domain }}"
      when: type == "slave"
  tags: sethostname

- name: Check if BIND is running
  service_facts:

- name: Check latest serial number
  include_tasks: checkserial.yml

- name: Install or upgrade to latest stable version of BIND
  dnf:
    name: "bind-{{ bindversion }}*"
    state: latest
  tags: installbind

- name: Generate or rotate rndc key
  block:
    - name: Generate rndc key
      command:
        cmd: rndc-confgen -a -c /etc/rndc.key

    - name: Set rndc key ownership
      file:
        path: "/etc/rndc.key"
        owner: root
        group: named
        mode: 0640

    - name: Copy rndc configuration file
      copy:
        src: "rndc.conf"
        dest: "/etc/"
        owner: named
        group: named
        mode: '0640'

    - name: Restart BIND if it's running to load new rndc key (Retry after 3 seconds if first attempt fails)
      systemd:
        name: named
        state: restarted
      register: result
      retries: 2
      delay: 3
      until: result.status.ActiveState == "active"
      when:
        - ansible_facts.services['named.service'] is defined
        - ansible_facts.services['named.service'].state == "running"
  tags: generate-rndc-key

- name: Configure BIND
  block:
    - name: Copy configuration file
      template:
        src: "named.conf.j2"
        dest: "/etc/named.conf"
        owner: named
        group: named
        mode: '0600'

    - name: Validate configuration file
      command:
        cmd: named-checkconf /etc/named.conf

    - name: Create zone file directory
      file:
        path: "/var/named/{{ type }}"
        state: directory
        owner: named
        group: named
        mode: '0700'

    - name: Create log directory
      file:
        path: "/var/named/log"
        state: directory
        owner: named
        group: named
        mode: '0700'

    - name: Set new serial number
      include_tasks: setserial.yml

    # Check if zone records exist
    # - If yes then rndc freeze, copy files, rndc thaw
    # - If no copy files without freeze and thaw
    - name: Check if forward zone file exist
      stat:
        path: "/var/named/{{ type }}/{{ domain }}.db"
      register: zone_forward_status

    - name: Freeze DNS
      command: rndc freeze
      when: zone_forward_status.stat.exists == true

    - name: Copy forward file
      template:
        src: "zone/forward.db.j2"
        dest: "/var/named/{{ type }}/{{ domain }}.db"
        owner: named
        group: named
        mode: '0600'
        trim_blocks: yes
        lstrip_blocks: yes

    - name: Copy reverse file
      template:
        src: "zone/reverse.db.j2"
        dest: "/var/named/{{ type }}/{{ ip_reverse_zone_file_prefix }}.db"
        owner: named
        group: named
        mode: '0600'
        trim_blocks: yes
        lstrip_blocks: yes

    - name: Thaw DNS
      command: rndc thaw
      when: zone_forward_status.stat.exists == true

    - name: Validate zone file
      command:
        cmd: "named-checkzone {{ domain }} /var/named/{{ type }}/{{ domain }}.db"

    - name: Disable IPv6
      lineinfile:
        path: /etc/sysconfig/named
        line: 'OPTIONS="-4"'
        state: present
  tags: setupzone

- name: Update firewalld
  block:
    - name: Permit UDP/53
      command:
        cmd: firewall-cmd --zone=public --add-port=53/udp --permanent

    - name: Permit TCP/53
      command:
        cmd: firewall-cmd --zone=public --add-port=53/tcp --permanent

    - name: Reload Rule
      command:
        cmd: firewall-cmd --reload
  tags: permit-port53

- name: Enable / Restart / Reload
  block:
#  - name: Put SELinux in permissive mode, logging actions that would be blocked.
#    selinux:
#      policy: targeted
#      state: permissive

  - name: Enable BIND
    systemd:
      name: named
      enabled: yes
      masked: no

  - name: Reload BIND
    systemd:
      name: named
      state: reloaded

  - name: Restart BIND (Retry after 3 seconds if first attempt fails)
    systemd:
      name: named
      state: restarted
    register: result
    retries: 2
    delay: 3
    until: result.status.ActiveState == "active"

#  - name: Generate SELinux Policy
#    shell:
#      cmd: "ausearch -c 'systemd' --raw | audit2allow -M my-systemd"
#
#  - name: Apply SELinux Policy
#    shell:
#      cmd: "semodule -X 300 -i my-systemd.pp"
#
#  - name: Generate SELinux Policy
#    shell:
#      cmd: "ausearch -c 'isc-worker0000' --raw | audit2allow -M my-iscworker0000"
#
#  - name: Apply SELinux Policy
#    shell:
#      cmd: "semodule -X 300 -i my-iscworker0000.pp"
#
#  - name: Put SELinux in permissive mode, logging actions that would be blocked.
#    selinux:
#      policy: targeted
#      state: enforcing
  tags: startbind

- name: Test BIND is properly setup and servicing
  block:
    - name: Get IP of site
      command:
        cmd: "dig @localhost +short {{ zone_records.www.hostname + \".\" + domain }}"
      register: ip

    - name: Assert ip returned is valid
      assert:
        that:
          - ip.stdout == ip_reverse_zone_file_prefix + "." + zone_records.www.hostip
        fail_msg: "ip.stdout: {{ ip.stdout }}"
      when: ip.stdout_lines is defined
  tags: test
...